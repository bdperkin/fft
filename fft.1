.TH FFT 1 "2024-12-19" "fft 1.3.0" "User Commands"
.SH NAME
fft \- File Type Tester: determine file types using filesystem, magic, and language tests
.SH SYNOPSIS
.B fft
[\fIOPTION\fR]... \fIFILE\fR|\fIDIRECTORY\fR...
.SH DESCRIPTION
.B fft
(File Type Tester) is a Python tool that determines the file type of files using three different test categories performed in sequence. When a directory is provided, all files within that directory are recursively processed:
.PP
1. \fBFilesystem Tests\fR \- Check file extensions, permissions, and filesystem attributes
.PP
2. \fBMagic Tests\fR \- Use libmagic to detect file types based on file signatures
.PP
3. \fBLanguage Tests\fR \- Analyze file content to detect programming languages and text formats
.PP
The first test that successfully identifies the file type will be reported.
.SH OPTIONS
.TP
.BR \-v ", " \-\-verbose
Show which test category detected the file type. The output format becomes:
.I filename: type [test_category test]
.TP
.BR \-b ", " \-\-brief
Do not prepend filenames to output lines (brief mode). Only the file type is displayed without the filename prefix.
.TP
.BR \-r ", " \-\-recursive
Recursively process directories (default when directory is given). This option is automatically enabled when a directory argument is provided.
.TP
.BR \-d ", " \-\-debug
Print internal debugging information to stderr. Shows detailed information about the file type detection process including which tests are being run, their results, and directory processing details.
.TP
.BR \-E ", " \-\-exit\-on\-error
Exit immediately on filesystem errors instead of continuing. When this option is enabled, the program will exit with status code 1 on the first encountered error (such as file not found or permission denied) rather than printing an error message and continuing to process remaining files.
.TP
.BR \-\-extension
Print a slash-separated list of valid extensions for the file type found. Instead of showing the file type name, this option displays the known file extensions associated with the detected file type. For file types with multiple extensions (like JPEG), all extensions are shown separated by forward slashes.
.TP
.BR \-\-version
Show version information and exit.
.TP
.BR \-h ", " \-\-help
Display help message and exit.
.SH TEST CATEGORIES
.SS Filesystem Tests
Examines file system properties and attributes:
.IP \(bu 2
Directory detection
.IP \(bu 2
Symbolic links
.IP \(bu 2
Device files (block/character)
.IP \(bu 2
FIFO pipes and sockets
.IP \(bu 2
Executable files (with shebang detection)
.IP \(bu 2
File extensions (comprehensive mapping of common extensions)
.SS Magic Tests
Uses the libmagic library for file signature analysis:
.IP \(bu 2
MIME type detection using libmagic
.IP \(bu 2
File signature analysis
.IP \(bu 2
Fallback to Python's mimetypes module
.SS Language Tests
Content-based programming language detection:
.IP \(bu 2
Pattern matching for various programming languages
.IP \(bu 2
Supported languages: Python, JavaScript, C/C++, Java, Shell scripts, PHP, Ruby, HTML, XML, JSON, CSS, Markdown
.IP \(bu 2
Text file detection based on printable character ratio
.SH EXAMPLES
.TP
Basic usage:
.B fft
script.py document.pdf image.jpg
.PP
Output:
.nf
script.py: Python script
document.pdf: PDF document
image.jpg: JPEG image
.fi
.TP
Verbose mode showing test categories:
.B fft \-v
script.py document.pdf README.md
.PP
Output:
.nf
script.py: Python script [Filesystem test]
document.pdf: PDF document [Magic test]
README.md: Markdown document [Language test]
.fi
.TP
Brief mode without filenames:
.B fft \-b
script.py document.pdf README.md
.PP
Output:
.nf
Python script
PDF document
Markdown document
.fi
.TP
Process a directory recursively:
.B fft
/home/user/project/
.PP
Output:
.nf
/home/user/project/README.md: Markdown document
/home/user/project/main.py: Python script
/home/user/project/src/utils.js: JavaScript file
/home/user/project/tests/test_main.py: Python script
.fi
.TP
Debug mode showing internal processing details:
.B fft \-d
script.py
.PP
Output to stdout:
.nf
script.py: Python script
.fi
.PP
Debug output to stderr:
.nf
DEBUG: Processing 1 argument(s): ['script.py']
DEBUG: 'script.py' is a file, processing directly
DEBUG: Starting file type detection for 'script.py'
DEBUG: Trying Filesystem test for 'script.py'
DEBUG: Running filesystem tests on 'script.py'
DEBUG: 'script.py' has extension: '.py'
DEBUG: Extension '.py' mapped to: Python script
DEBUG: Filesystem test succeeded for 'script.py': Python script
.fi
.TP
Exit immediately on errors with -E flag:
.B fft \-E
existing_file.py /nonexistent/file.txt another_file.js
.PP
Output to stdout:
.nf
existing_file.py: Python script
.fi
.PP
Output to stderr and exit status 1:
.nf
ERROR: File or directory '/nonexistent/file.txt' does not exist
.fi
.TP
Test various file types including directories (normal behavior):
.B fft
/dev/null . /bin/bash /nonexistent/file
.PP
Output:
.nf
/dev/null: character device
.: directory (empty or inaccessible)
/bin/bash: executable script
/nonexistent/file: ERROR: File or directory '/nonexistent/file' does not exist
.fi
.TP
Show file extensions instead of file types:
.B fft \-\-extension
script.py image.jpg document.html style.css
.PP
Output:
.nf
script.py: py
image.jpg: jpeg/jpg
document.html: html
style.css: css
.fi
.TP
Extension mode with brief output:
.B fft \-\-extension \-b
script.py image.jpg document.html
.PP
Output:
.nf
py
jpeg/jpg
html
.fi
.SH SUPPORTED FILE TYPES
.SS Extensions (Filesystem Tests)
Text files: .txt, .md, .csv
.br
Programming: .py, .js, .html, .css, .json, .xml, .c, .cpp, .h, .java, .class, .rb, .php, .sh, .bat, .ps1
.br
Images: .jpg, .jpeg, .png, .gif
.br
Archives: .zip, .tar, .gz
.br
Documents: .pdf
.br
Libraries: .so, .a, .dll
.br
Executables: .exe, .o
.SS Language Detection Patterns
Detects programming languages through content analysis including shebang lines, import statements, syntax patterns, and document structure markers.
.SH FILES
.TP
.I ~/.local/lib/python*/site-packages/fft.py
Main program file (when installed via pip)
.SH DEPENDENCIES
.TP
.I python-magic
Required for magic number detection. Install with:
.B pip install python-magic
.TP
.I libmagic
System library for file type detection. Install with:
.B apt-get install libmagic1
(Debian/Ubuntu) or
.B dnf install file-libs
(RHEL/Fedora)
.SH DIAGNOSTICS
The program exits with status 0 on success. Error messages are printed to standard output for individual files that cannot be processed, but the program continues processing remaining files.
.SH NOTES
.IP \(bu 2
Tests are performed in order: filesystem, magic, then language tests
.IP \(bu 2
The first successful test determines the reported file type
.IP \(bu 2
Non-existent files return an error message but don't stop processing
.IP \(bu 2
Binary files may be detected as "unknown file type" if no test succeeds
.IP \(bu 2
Directory arguments are automatically processed recursively, finding all files within
.IP \(bu 2
Files within directories are processed in sorted order by full path
.IP \(bu 2
Empty or inaccessible directories display a special message
.IP \(bu 2
Debug mode outputs detailed processing information to stderr while normal results go to stdout
.IP \(bu 2
Debug output includes test execution order, results, and file discovery details
.IP \(bu 2
Exit-on-error mode (-E) sends error messages to stderr and exits with status code 1
.IP \(bu 2
Without -E flag, errors are printed to stdout and processing continues with remaining files
.IP \(bu 2
Exit-on-error mode stops processing immediately after the first filesystem error
.SH BUGS
Report bugs to: https://github.com/bdperkin/fft/issues
.SH SEE ALSO
.BR file (1),
.BR magic (5),
.BR mimetypes (1)
.SH AUTHOR
Brandon Perkins <bdperkin@gmail.com>
.SH COPYRIGHT
Copyright (c) 2025 Brandon Perkins. License MIT: https://opensource.org/licenses/MIT
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH VERSION
This manual page documents
.B fft
version 1.3.0.
